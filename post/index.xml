<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on True Me </title>
    <link>https://zetaoyang.github.io/post/</link>
    <description>Recent content in Posts on True Me </description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Zetao的小站</copyright>
    <lastBuildDate>Sun, 09 Oct 2016 10:43:34 +0800</lastBuildDate>
    <atom:link href="https://zetaoyang.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>生成渐进式 jpeg</title>
      <link>https://zetaoyang.github.io/post/post-02/</link>
      <pubDate>Sun, 09 Oct 2016 10:43:34 +0800</pubDate>
      
      <guid>https://zetaoyang.github.io/post/post-02/</guid>
      <description>&lt;p&gt;用&lt;code&gt;python&lt;/code&gt;实现了一个带参数的命令行将图片转换成&lt;code&gt;progressive encoding&lt;/code&gt;(渐进式)JPEG格式。&lt;br /&gt;
　　这里先贴出代码：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;#! python3
import platform, sys, os
import getopt
from PIL import Image ,ImageFile

def isWindows():
    return &#39;Windows&#39; in platform.system()
 
def isLinux():
    return &#39;Linux&#39; in platform.system()

def usage():
    print (&amp;quot;-h: This message.&amp;quot;)
    print (&amp;quot;-i [file]: the path of the target image file. &amp;quot;)
    print (&amp;quot;-o [filepath]: the path of the output. &amp;quot;)
    print (&amp;quot;EXAMPLES:&amp;quot;)
    print (&amp;quot;$py tojpeg.py -i /home/test.jpg - o /home&amp;quot;)

def info():
    print (&amp;quot;**************************************************&amp;quot;)
    print (&amp;quot;**|&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;|**&amp;quot;)
    print (&amp;quot;**|convert images to progressive encoding JPEG |**&amp;quot;)
    print (&amp;quot;**|Version: 1 beta                             |**&amp;quot;)
    print (&amp;quot;**|By: zetao yang                              |**&amp;quot;)
    print (&amp;quot;**|Email: yangzetao2015[@] outlook             |**&amp;quot;)
    print (&amp;quot;**|https://zetaoyang.github.io                 |**&amp;quot;)
    print (&amp;quot;**|-                                           |**&amp;quot;)
    print (&amp;quot;**|Usage: $tojpeg -h                           |**&amp;quot;)
    print (&amp;quot;**|                                            |**&amp;quot;)
    print (&amp;quot;**|,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,|**&amp;quot;)
    print (&amp;quot;**************************************************&amp;quot;)
    print (&amp;quot;&amp;quot;)

if(isWindows()):
   os.system(&amp;quot;cls&amp;quot;)
if(isLinux()):
   os.system(&amp;quot;clear&amp;quot;)

def main():
    info()
    try:
        #使用sys.argv[1:] 过滤掉第一个参数
        #（它是执行脚本的名字，不应算作参数的一部分）
        opts,args = getopt.getopt(sys.argv[1:],&amp;quot;hi:o:&amp;quot;, [&amp;quot;help&amp;quot;,&amp;quot;input=&amp;quot; ,&amp;quot;output=&amp;quot;])
    except getopt.GetoptError as err:
        print (err)
        sys.exit(2)

    for opt, arg in opts:
        if opt in (&amp;quot;-h&amp;quot;,&amp;quot;--help&amp;quot;):
            usage()
            sys.exit()
        elif opt in (&amp;quot;-i&amp;quot;,&amp;quot;--input&amp;quot;):
            input_file = arg
        elif opt in (&amp;quot;-o&amp;quot;,&amp;quot;--output&amp;quot;):
            output_path = arg
        else:
            assert False, &amp;quot;unhandled option&amp;quot;

    try:
        img = Image.open(input_file)
        destination = output_path + &amp;quot;/output.jpeg&amp;quot;
        try:
            img.save(destination,&amp;quot;JPEG&amp;quot;,quality=80,optimize=True,progressive=True)
            print(&amp;quot;conversion is ok.&amp;quot;)
        except IOError:
            ImageFile.MAXBLOCK = img.size[0]*img.size[1]
            img.save(destination,&amp;quot;JPEG&amp;quot;,quality=80,optimize=True,progressive=True)
    except KeyboardInterrupt:
        print (&amp;quot;\nWell i hope you had a good time.&amp;quot;)
        
if __name__ == &amp;quot;__main__&amp;quot;:
    main()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;未完待续&amp;hellip;&amp;hellip;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>用Github API 上传文件的方法</title>
      <link>https://zetaoyang.github.io/post/post-01/</link>
      <pubDate>Sat, 08 Oct 2016 11:04:19 +0800</pubDate>
      
      <guid>https://zetaoyang.github.io/post/post-01/</guid>
      <description>&lt;p&gt;前几天，在V2EX看见有人用Github API基于python实现了一个图床。于是我决定用nodejs也实现一个类似功能。首先我看有没现成的第三方库，在 &lt;a href=&#34;https://developer.github.com/libraries/&#34;&gt;Libraries | GitHub Developer Guide&lt;/a&gt; 我发现有5个跟javascript相关的库：&lt;br /&gt;
&lt;div align=center&gt;
&lt;img src=&#34;https://cdn.rawgit.com/qanno/qanno.github.io/master/images/github-api-js.png&#34; alt=&#34;github-api-js.jpg&#34; /&gt;&lt;br /&gt;
&lt;/div&gt;
经调研发现 &lt;a href=&#34;https://github.com/michael/github&#34;&gt;GitHub.js wrapper around the GitHub API&lt;/a&gt; 比较好入手，基本将Github API 全都实现了，并且封装了自己的接口，但是缺点还是有的，文档写的不太详细。然后就开始看它的文档，其中Repository的writeFile()方法就是上传文件的函数。&lt;br /&gt;
其中writeFile():&lt;br /&gt;
&lt;div align=center&gt;
&lt;img src=&#34;https://cdn.rawgit.com/qanno/qanno.github.io/master/images/github-api-writeFile-2.3.0.png&#34; alt=&#34;github-api-writeFile-2.3.0.png&#34; /&gt;&lt;br /&gt;
&lt;/div&gt;&lt;br /&gt;
　　 先在这里贴出代码(ECMAScript 2015标准)：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;//导入github-api
var GitHub = require(&amp;quot;github-api&amp;quot;)
var fs = require(&amp;quot;fs&amp;quot;)

const gh = new GitHub({
	token: &#39;&amp;lt;your personal token&amp;gt;&#39;//这里采用token认证
})

var branch = &#39;&amp;lt;branch_name&amp;gt;&#39;//eg. master
var ufilePath = &#39;&amp;lt;repo_path&amp;gt;&#39;//eg. images/
//{master}/xxx.jpg
var ufileName = &#39;&amp;lt;file_name&amp;gt;&#39;//eg. xxx.jpg
var commit = &#39;here i am&#39;
var user = &#39;&amp;lt;user name&amp;gt;&#39;//用户名
var repo = &#39;&amp;lt;repository name&amp;gt;&#39;//仓库名

const re = gh.getRepo(user,repo)

//同步读取文件
var imageBlob = fs.readFileSync(&#39;&amp;lt;filepath&amp;gt;&#39;)
//base64编码
var imageB64 = imageBlob.toString(&#39;base64&#39;)
//ascii编码
//utf8编码也可以，只不过有些浪费。
var data = imageB64.toString(&#39;ascii&#39;)

var options = {
    //author:{},
    //commiter:{},
    encode: false
}

re.writeFile(branch, ufilePath + ufileName, data , commit,options, (error,result,request)=&amp;gt;{
    if (error===null) {	console.log(`https://cdn.rawgit.com/${user}/${repo}/${branch}/${ufilePath}${ufileName}`)
	 }
})

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;　　 这其中的关键就是编码问题， GitHub Contents API 要求content是base64编码。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>