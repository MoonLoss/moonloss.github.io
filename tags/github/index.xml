<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Github on True Me </title>
    <link>https://zetaoyang.github.io/tags/github/</link>
    <description>Recent content in Github on True Me </description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Zetao的小站</copyright>
    <lastBuildDate>Mon, 17 Oct 2016 09:44:23 +0800</lastBuildDate>
    <atom:link href="https://zetaoyang.github.io/tags/github/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>通过 Gitlab-cl 将 Hugo blog 自动部署至 GitHub </title>
      <link>https://zetaoyang.github.io/post/post-05/</link>
      <pubDate>Mon, 17 Oct 2016 09:44:23 +0800</pubDate>
      
      <guid>https://zetaoyang.github.io/post/post-05/</guid>
      <description>&lt;p&gt;教大家用 Hugo 建个人博客的文章太多了，这次我要介绍的是用 Gitlab-cl 自动部署( 持续集成 ) Hugo blog 到 Github Pages 上 (P.S. 当然前提是你必须有 Gitlab 账号哦 )，其核心就是一个配置文件&lt;code&gt;.gitlab-ci.yml&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# alpine linux 
#其包管理是 apk
image: alpine:3.4

before_script:
  - apk update 
  - apk add openssl &amp;amp;&amp;amp; apk add git &amp;amp;&amp;amp; apk add nodejs
  - npm install
  - wget https://github.com/spf13/hugo/releases/download/v0.16/hugo_0.16_linux-64bit.tgz
  - echo &amp;quot;37ee91ab3469afbf7602a091d466dfa5  hugo_0.16_linux-64bit.tgz&amp;quot; | md5sum -c
  - tar xf hugo_0.16_linux-64bit.tgz &amp;amp;&amp;amp; cp ./hugo /usr/bin
  - hugo version

pages:
  cache:
    paths:
    - node_modules/

  script:
  - git clone https://&amp;lt;your personal access tokens&amp;gt;@github.com/&amp;lt;your user name&amp;gt;/&amp;lt;your repository name&amp;gt; public
  - npm run build
  - cd ./public
  - git config user.name &amp;quot;&amp;lt;your user name&amp;gt;&amp;quot;
  - git config user.email &amp;quot;&amp;lt;your email&amp;gt;&amp;quot;
  - git config --global push.default simple
  - git add .
  - git commit -m &amp;quot;update site&amp;quot;
  - git push --set-upstream &amp;quot;https://&amp;lt;your personal access tokens&amp;gt;@github.com/&amp;lt;your user name&amp;gt;/&amp;lt;your repository name&amp;gt;&amp;quot;
  artifacts:
    paths:
    - public
  only:
  - master
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;我这里使用的是 Hugo 的 1.6 版本，当然你也可以安装当前最新的 1.7 版本。&lt;br /&gt;
由于我使用了&lt;code&gt;gulp&lt;/code&gt;压缩 html 和 js 文件，所以需要安装&lt;code&gt;nodejs&lt;/code&gt;。下面是&lt;code&gt;gulp&lt;/code&gt;的配置文件&lt;code&gt;gulpfile.babel.js&lt;/code&gt;的内容：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import gulp from &#39;gulp&#39;
import htmlmin from &#39;gulp-htmlmin&#39;
import uglify from &#39;gulp-uglify&#39;
import runSequence from &#39;run-sequence&#39;
import shell from &#39;gulp-shell&#39;

gulp.task(&#39;hugo-build&#39;, shell.task([&#39;hugo&#39;]))

gulp.task(&#39;minify-html&#39;, () =&amp;gt; {
  return gulp.src(&#39;public/**/*.html&#39;)
    .pipe(htmlmin({
      collapseWhitespace: true,
      minifyCSS: true,
      minifyJS: true,
      removeComments: true,
      useShortDoctype: true,
    }))
    .pipe(gulp.dest(&#39;./public&#39;))
})

gulp.task(&#39;minify-js&#39;, () =&amp;gt; {
    return gulp.src(&#39;./public/**/*.js&#39;)
        .pipe(uglify())
        .pipe(gulp.dest(&#39;./public&#39;));
});

gulp.task(&#39;build&#39;, [&#39;hugo-build&#39;], (callback) =&amp;gt; {
  runSequence(&#39;minify-html&#39;,&#39;minify-js&#39;, callback)
})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这里用&lt;code&gt;gulp-shell&lt;/code&gt;这个包，执行&lt;code&gt;hugo&lt;/code&gt;这个命令。&lt;br /&gt;
package.json的内容:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
  &amp;quot;private&amp;quot;: true,
  &amp;quot;scripts&amp;quot;: {
    &amp;quot;build&amp;quot;: &amp;quot;gulp build&amp;quot;
  },
  &amp;quot;devDependencies&amp;quot;: {
    &amp;quot;babel-preset-es2015&amp;quot;: &amp;quot;^6.5.0&amp;quot;,
    &amp;quot;babel-register&amp;quot;: &amp;quot;^6.5.2&amp;quot;,
    &amp;quot;gulp&amp;quot;: &amp;quot;^3.9.1&amp;quot;,
    &amp;quot;gulp-cli&amp;quot;: &amp;quot;^1.2.1&amp;quot;,
    &amp;quot;gulp-htmlmin&amp;quot;: &amp;quot;^1.3.0&amp;quot;,
    &amp;quot;gulp-uglify&amp;quot;: &amp;quot;^2.0.0&amp;quot;,
    &amp;quot;gulp-shell&amp;quot;: &amp;quot;^0.5.2&amp;quot;,
    &amp;quot;run-sequence&amp;quot;: &amp;quot;^1.1.5&amp;quot;
  },
  &amp;quot;babel&amp;quot;: {
    &amp;quot;presets&amp;quot;: [
      &amp;quot;es2015&amp;quot;
    ]
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;由于&lt;code&gt;gulpfile.babel.js&lt;/code&gt;采用&lt;code&gt;ECMAScript 6&lt;/code&gt;标准，使用了最新的 JavaScript 语法，需要用&lt;code&gt;babeljs&lt;/code&gt;将其语法转化。&lt;br /&gt;
这些做完之后就可以在&lt;code&gt;.gitlab-ci.yml&lt;/code&gt;中用&lt;code&gt;npm run build&lt;/code&gt;部署你的 blog 了。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>使用 Github ssh key 部署 Hexo 博客</title>
      <link>https://zetaoyang.github.io/post/hexo-ssh-key/</link>
      <pubDate>Sat, 09 Jul 2016 10:32:01 +0800</pubDate>
      
      <guid>https://zetaoyang.github.io/post/hexo-ssh-key/</guid>
      <description>

&lt;p&gt;&lt;em&gt;以下方法适合于 Windows 用户，如果是 Linux或者 Mac 用户可以直接用终端的命令进行操作。&lt;/em&gt;&lt;/p&gt;

&lt;h4 id=&#34;一-列出已存在的-ssh-key&#34;&gt;一、列出已存在的 ssh Key&lt;/h4&gt;

&lt;p&gt;方法1.打开 Git Bash，并且输入：&lt;br /&gt;
&lt;code&gt;ls ‐al ~/.ssh
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;方法2.打开 &lt;a href=&#34;http://cmder.net/&#34;&gt;cmder&lt;/a&gt; ，并且输入：&lt;br /&gt;
&lt;code&gt;ls ‐al ~/.ssh
&lt;/code&gt;&lt;/p&gt;

&lt;h4 id=&#34;二-生成密钥&#34;&gt;二、生成密钥&lt;/h4&gt;

&lt;p&gt;方法1.用 Git Bash，然后输入：&lt;br /&gt;
&lt;code&gt;ssh‐keygen ‐t rsa ‐C &amp;quot;your_email@example.com&amp;quot;
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;这个命令将会生成一个以 your_email@example.com 为标签的 ssh key，然后 bash 中会显示：&lt;br /&gt;
Generating public/private rsa key pair.
Enter file in which to save the key (/c/Users/you/.ssh/id_rsa): [Press enter]&lt;/p&gt;

&lt;p&gt;*注*：此处私钥的名称可以自定义，即可以不使用默认的名称 ‘id_rsa’。
另外还有一个常识，RSA 加密算法它的&lt;strong&gt;公钥是从私钥提取而来&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;直接回车，然后出现：&lt;br /&gt;
Enter passphrase (empty for no passphrase): [Type a passphrase]
Enter same passphrase again: [Type passphrase again]&lt;/p&gt;

&lt;p&gt;因为追求操作方便，所以不打算在 deploy 的时候输入这个 passphrase ，所以直接回车两次设为空。然后你会看到：&lt;br /&gt;
&lt;code&gt;Your identification has been saved in ~/.ssh/id_rsa.
 Your public key has been saved in ~/.ssh/id_rsa.pub.
The key fingerprint is:
01:0f:f4:3b:ca:85:d6:17:a1:7d:f0:68:9d:f0:a2:db your_email@example.com
&lt;/code&gt;&lt;/p&gt;

&lt;h4 id=&#34;三-加入ssh-agent&#34;&gt;三、加入ssh Agent&lt;/h4&gt;

&lt;p&gt;下一步在 Git Bash 或者 cmder 中输入：&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ssh‐agent ‐s
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;如果出现类似 Agent pid XXXX 这样的字样，则跳过下一步，否则输入：&lt;br /&gt;
&lt;code&gt;eval `ssh‐agent ‐s`
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;*注*：此处用 cmder 可能会出现下面的提示&lt;br /&gt;
Cmder - &amp;lsquo;eval&amp;rsquo; command is not recognized&lt;br /&gt;
解决方法：使用&lt;code&gt;bash&lt;/code&gt;命令进入
bash shell。然后&lt;code&gt;eval&lt;/code&gt;就可以使用了。&lt;/p&gt;

&lt;p&gt;直到出现 Agent pid XXXX 这样的提示之后，输入：&lt;br /&gt;
&lt;code&gt;ssh‐add ~/.ssh/id_rsa
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;这样，就成功的在本地生成了一个可用的ssh key。&lt;/p&gt;

&lt;h4 id=&#34;四-将ssh-key添加到github中&#34;&gt;四、将ssh Key添加到Github中&lt;/h4&gt;

&lt;p&gt;下面将这个 key 添加到 github 网站。 
打开&lt;a href=&#34;https://github.com/settings/ssh&#34;&gt;https://github.com/settings/ssh&lt;/a&gt;,  点击 Add ssh Key ，复制 id_rsa.pub(或者是你自己重命名的公钥名称) 中的所有内容到 Key 框中，在 Title 框中输入方便自己记忆的名字（建议输入能让自己明白是哪台电脑的名字，方便以后管理）。 
当网页显示添加成功后，就已经完成了全部的操作。
下面进行一些测试，同样是打开 Git Bash 或 cmder，输入： 
&lt;code&gt;ssh ‐T git@github.com
&lt;/code&gt;
 bash 或 cmder 中会显示如下字样：
&lt;code&gt;The authenticity of host &#39;github.com (207.97.227.239)&#39; can&#39;t be established.
RSA key fingerprint is 16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48.
Are you sure you want to continue connecting (yes/no)?  
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;输入 yes 之后，计算机会自动将 github.com 列入已知的 host，然后会出现如下提示：&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Hi username! You&#39;ve successfully authenticated, but GitHub does not
provide shell access.    
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;如果成功看见，说明你已经配置好了。 
如果出现任何错误提示，请仔细检查自己的操作。&lt;/p&gt;

&lt;p&gt;&lt;em&gt;另外&lt;/em&gt; 由于 ssh 配置文件的不匹配，导致的 Permission denied (publickey)及其解决方法：一定要保持新生成的密匙文件的名字同 “ssh_config” 中 “IdentityFile” 字段的值一致即可，其中&lt;code&gt;ssh_config&lt;/code&gt;文件在&lt;code&gt;{Git的安装路径}\etc\ssh\ssh_config&lt;/code&gt;路径。
例如：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Host github.com
	User git
	StrictHostKeyChecking no
	IdentityFile ~/.ssh/{你的rsa私钥的名称}
	IdentitiesOnly yes
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Hexo 博客本地站内搜索</title>
      <link>https://zetaoyang.github.io/post/hexo-localsearch/</link>
      <pubDate>Fri, 08 Jul 2016 14:49:45 +0800</pubDate>
      
      <guid>https://zetaoyang.github.io/post/hexo-localsearch/</guid>
      <description>&lt;p&gt;一、要使用搜索，必须先生成博客索引数据，Hexo  可以通过下面的这个插件生成：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;npm install hexo-generator-search --save

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;二、只需要在 Hexo 站点 _config.yml 中添加如下配置即可：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;search:
  path: search.xml
  field: post
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;path&lt;/strong&gt; - file path. Default is &lt;code&gt;search.xml&lt;/code&gt; .&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;field&lt;/strong&gt; - the search scope you want to search, you can chose:

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;post&lt;/strong&gt; (Default) - will only covers all the posts of your blog.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;page&lt;/strong&gt; - will only covers all the pages of your blog.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;all&lt;/strong&gt; - will covers all the posts and pages of your blog.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;更多配置说明可到插件页面查看：&lt;a href=&#34;https://github.com/PaicHyperionDev/hexo-generator-search&#34;&gt;hexo-generator-search&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;三、然后在 themes/next/layout/_partials/search 目录下修改 localsearch.swig 文件。&lt;br /&gt;
  原始文件内容如下：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt; &amp;lt;script type=&amp;quot;text/javascript&amp;quot;&amp;gt;
     var search_path = &amp;quot;&amp;lt;%= config.search.path %&amp;gt;&amp;quot;;
     if (search_path.length == 0) {
     	search_path = &amp;quot;search.xml&amp;quot;;
     }
     var path = &amp;quot;&amp;lt;%= config.root %&amp;gt;&amp;quot; + search_path;
     searchFunc(path, &#39;local-search-input&#39;, &#39;local-search-result&#39;);
 &amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;修改后的文件内容为:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;div class=&amp;quot;popup&amp;quot;&amp;gt;
 &amp;lt;span class=&amp;quot;search-icon fa fa-search&amp;quot;&amp;gt;&amp;lt;/span&amp;gt;
 &amp;lt;input type=&amp;quot;text&amp;quot; id=&amp;quot;local-search-input&amp;quot; placeholder=&amp;quot;search my blog...&amp;quot;&amp;gt;
 &amp;lt;div id=&amp;quot;local-search-result&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
 &amp;lt;span class=&amp;quot;popup-btn-close&amp;quot;&amp;gt;close&amp;lt;/span&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;其他的地方都不需要改，这样 Hexo 本地站内搜索就完成了。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>