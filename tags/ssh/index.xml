<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Ssh on True Me </title>
    <link>https://zetaoyang.github.io/tags/ssh/</link>
    <description>Recent content in Ssh on True Me </description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Zetao的小站</copyright>
    <lastBuildDate>Mon, 10 Oct 2016 10:48:19 +0800</lastBuildDate>
    <atom:link href="https://zetaoyang.github.io/tags/ssh/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>在 Alpine Linux 上编译 Linux0.11 内核</title>
      <link>https://zetaoyang.github.io/post/post-04/</link>
      <pubDate>Mon, 10 Oct 2016 10:48:19 +0800</pubDate>
      
      <guid>https://zetaoyang.github.io/post/post-04/</guid>
      <description>&lt;p&gt;近日，想在 Windows 系统下编译 Linux-0.11 内核。 于是就在 VirtualBox 中安装了 &lt;a href=&#34;http://alpinelinux.org/&#34;&gt;Alpine Linux&lt;/a&gt; 3.4 。&lt;br /&gt;
  其中 VirtualBox 下的网络配置如下：&lt;br /&gt;
使用2块网卡，第一块设置为&lt;code&gt;host-only&lt;/code&gt;方式：&lt;br /&gt;
&lt;img src=&#34;https://cdn.rawgit.com/qanno/qanno.github.io/master/images/vbox-network-1.png&#34; alt=&#34;vbox-network-1.png&#34; /&gt;&lt;br /&gt;
  第二块设置为&lt;code&gt;nat&lt;/code&gt;方式：
&lt;img src=&#34;https://cdn.rawgit.com/qanno/qanno.github.io/master/images/vbox-network-2.png&#34; alt=&#34;vbox-network-2.png&#34; /&gt;&lt;br /&gt;
  其中，VirtualBox Host-Only Ethernet Adapter 的配置如下：&lt;br /&gt;
&lt;img src=&#34;https://cdn.rawgit.com/qanno/qanno.github.io/master/images/vbox-hostonly.png&#34; alt=&#34;vbox-hostonly.png&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://cdn.rawgit.com/qanno/qanno.github.io/master/images/vbox-hostonly-ipv4.png&#34; alt=&#34;vbox-hostonly-ipv4.png&#34; /&gt;&lt;br /&gt;
  其中, DNS 服务器地址设置和本地上网的设置相同。   IP 地址是自动生成，也可手动修改。这里我使用的是阿里的公共 DNS 。&lt;br /&gt;
  然后登陆 Alpine Linux ，查看 MAC 地址是否和在 VirtualBox 中网络设置中的 MAC 地址一样。
&lt;img src=&#34;https://cdn.rawgit.com/qanno/qanno.github.io/master/images/alpine-network.png&#34; alt=&#34;alpine-network.png&#34; /&gt;&lt;br /&gt;
  这样主机和虚拟机就可以互 ping ，主机还可通过   ssh 连接虚拟机。例如：&lt;code&gt;ssh root@192.168.56.101&lt;/code&gt;   (ps. 我用的是 &lt;a href=&#34;http://cmder.net/&#34;&gt;cmder&lt;/a&gt; 上的 ssh 工具)。&lt;/p&gt;

&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;推荐： 在Windows上可以用 &lt;a href=&#34;http://www.wm.edu/offices/it/services/software/licensedsoftware/webeditingsftp/sshsecureshell/index.php&#34;&gt;SSH Secure Shell Client&lt;/a&gt; 这个工具替代&lt;code&gt;scp&lt;/code&gt;命令在主机和虚拟机之间传输文件。&lt;br /&gt;
&lt;img src=&#34;https://cdn.rawgit.com/qanno/qanno.github.io/master/images/SSHSecureShellClient.png&#34; alt=&#34;SSHSecureShellClient.png&#34; /&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;到这儿，都是些准备工作，接下来才是本文要说的东西。&lt;br /&gt;
由于 linux 0.11 (原版)内核编译需要 gcc3.4.6  ,而这个 gcc 版本太老了。于是就出现了 linux 0.11-gcc4 这个版本(网上可以搜到),可以用 gcc4.x 去编译。在我的 Linux Mint 18 上，修改了几个错误之后，用自带的 gcc5.4.0 编译成功了（此处为我修改的&lt;a href=&#34;https://cdn.rawgit.com/qanno/qanno.github.io/master/downloads/linux-gcc5.4.0.zip&#34;&gt;源码&lt;/a&gt;，如果还有错误编译不通过，请参考&lt;a href=&#34;http://www.voidcn.com/blog/hjq842382134/article/p-5955492.html&#34;&gt;这篇文章&lt;/a&gt;），我不甘心，我想用更高的 gcc 版本去完成这件事。在 Gihub 上 search   了一番，发现了这个：&lt;a href=&#34;https://github.com/yuanxinyu/Linux-0.11&#34;&gt;Linux-0.11&lt;/a&gt;，这个修改版我终于在 Alpine Linux 上编译成功了（如果遇到： &amp;ldquo;make: execvp: /tools/build.sh Permission denied .&amp;rdquo; 请修改build.sh的权限。）。
  最后，用 &lt;a href=&#34;http://bochs.sourceforge.net&#34;&gt;bochs&lt;/a&gt; 模拟启动成功了。&lt;br /&gt;
  &lt;img src=&#34;https://cdn.rawgit.com/qanno/qanno.github.io/master/images/bochs-linux0.11.png&#34; alt=&#34;bochs-linux0.11.png&#34; /&gt;
其中 bochs 的 bxrc 文件：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#BIOS映像文件和VGA BIOS映像文件
#XXX为Bochs的安装盘
romimage: file=XXX:\Bochs-2.6.8\BIOS-bochs-latest
#运行内存
megs: 64
vgaromimage: file=XXX:\Bochs-2.6.8\VGABIOS-lgpl-latest
#这个是启动软盘
floppya: 1_44=C:\Users\xxxx\Desktop\Image,status=inserted
ata0-master: type=disk, path=&amp;quot;C:\Users\xxxx\Desktop\linux_0_11-master\hdc-0.11.img&amp;quot;, mode=flat, cylinders=204, heads=16, spt=38
#确定启动方式
boot: c
log: C:\Users\xxxx\Desktop\bochsout.txt
cpu: count=1, ips=1000000
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>使用 Github ssh key 部署 Hexo 博客</title>
      <link>https://zetaoyang.github.io/post/hexo-ssh-key/</link>
      <pubDate>Sat, 09 Jul 2016 10:32:01 +0800</pubDate>
      
      <guid>https://zetaoyang.github.io/post/hexo-ssh-key/</guid>
      <description>

&lt;p&gt;&lt;em&gt;以下方法适合于 Windows 用户，如果是 Linux或者 Mac 用户可以直接用终端的命令进行操作。&lt;/em&gt;&lt;/p&gt;

&lt;h4 id=&#34;一-列出已存在的-ssh-key&#34;&gt;一、列出已存在的 ssh Key&lt;/h4&gt;

&lt;p&gt;方法1.打开 Git Bash，并且输入：&lt;br /&gt;
&lt;code&gt;ls ‐al ~/.ssh
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;方法2.打开 &lt;a href=&#34;http://cmder.net/&#34;&gt;cmder&lt;/a&gt; ，并且输入：&lt;br /&gt;
&lt;code&gt;ls ‐al ~/.ssh
&lt;/code&gt;&lt;/p&gt;

&lt;h4 id=&#34;二-生成密钥&#34;&gt;二、生成密钥&lt;/h4&gt;

&lt;p&gt;方法1.用 Git Bash，然后输入：&lt;br /&gt;
&lt;code&gt;ssh‐keygen ‐t rsa ‐C &amp;quot;your_email@example.com&amp;quot;
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;这个命令将会生成一个以 your_email@example.com 为标签的 ssh key，然后 bash 中会显示：&lt;br /&gt;
Generating public/private rsa key pair.
Enter file in which to save the key (/c/Users/you/.ssh/id_rsa): [Press enter]&lt;/p&gt;

&lt;p&gt;*注*：此处私钥的名称可以自定义，即可以不使用默认的名称 ‘id_rsa’。
另外还有一个常识，RSA 加密算法它的&lt;strong&gt;公钥是从私钥提取而来&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;直接回车，然后出现：&lt;br /&gt;
Enter passphrase (empty for no passphrase): [Type a passphrase]
Enter same passphrase again: [Type passphrase again]&lt;/p&gt;

&lt;p&gt;因为追求操作方便，所以不打算在 deploy 的时候输入这个 passphrase ，所以直接回车两次设为空。然后你会看到：&lt;br /&gt;
&lt;code&gt;Your identification has been saved in ~/.ssh/id_rsa.
 Your public key has been saved in ~/.ssh/id_rsa.pub.
The key fingerprint is:
01:0f:f4:3b:ca:85:d6:17:a1:7d:f0:68:9d:f0:a2:db your_email@example.com
&lt;/code&gt;&lt;/p&gt;

&lt;h4 id=&#34;三-加入ssh-agent&#34;&gt;三、加入ssh Agent&lt;/h4&gt;

&lt;p&gt;下一步在 Git Bash 或者 cmder 中输入：&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ssh‐agent ‐s
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;如果出现类似 Agent pid XXXX 这样的字样，则跳过下一步，否则输入：&lt;br /&gt;
&lt;code&gt;eval `ssh‐agent ‐s`
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;*注*：此处用 cmder 可能会出现下面的提示&lt;br /&gt;
Cmder - &amp;lsquo;eval&amp;rsquo; command is not recognized&lt;br /&gt;
解决方法：使用&lt;code&gt;bash&lt;/code&gt;命令进入
bash shell。然后&lt;code&gt;eval&lt;/code&gt;就可以使用了。&lt;/p&gt;

&lt;p&gt;直到出现 Agent pid XXXX 这样的提示之后，输入：&lt;br /&gt;
&lt;code&gt;ssh‐add ~/.ssh/id_rsa
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;这样，就成功的在本地生成了一个可用的ssh key。&lt;/p&gt;

&lt;h4 id=&#34;四-将ssh-key添加到github中&#34;&gt;四、将ssh Key添加到Github中&lt;/h4&gt;

&lt;p&gt;下面将这个 key 添加到 github 网站。 
打开&lt;a href=&#34;https://github.com/settings/ssh&#34;&gt;https://github.com/settings/ssh&lt;/a&gt;,  点击 Add ssh Key ，复制 id_rsa.pub(或者是你自己重命名的公钥名称) 中的所有内容到 Key 框中，在 Title 框中输入方便自己记忆的名字（建议输入能让自己明白是哪台电脑的名字，方便以后管理）。 
当网页显示添加成功后，就已经完成了全部的操作。
下面进行一些测试，同样是打开 Git Bash 或 cmder，输入： 
&lt;code&gt;ssh ‐T git@github.com
&lt;/code&gt;
 bash 或 cmder 中会显示如下字样：
&lt;code&gt;The authenticity of host &#39;github.com (207.97.227.239)&#39; can&#39;t be established.
RSA key fingerprint is 16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48.
Are you sure you want to continue connecting (yes/no)?  
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;输入 yes 之后，计算机会自动将 github.com 列入已知的 host，然后会出现如下提示：&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Hi username! You&#39;ve successfully authenticated, but GitHub does not
provide shell access.    
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;如果成功看见，说明你已经配置好了。 
如果出现任何错误提示，请仔细检查自己的操作。&lt;/p&gt;

&lt;p&gt;&lt;em&gt;另外&lt;/em&gt; 由于 ssh 配置文件的不匹配，导致的 Permission denied (publickey)及其解决方法：一定要保持新生成的密匙文件的名字同 “ssh_config” 中 “IdentityFile” 字段的值一致即可，其中&lt;code&gt;ssh_config&lt;/code&gt;文件在&lt;code&gt;{Git的安装路径}\etc\ssh\ssh_config&lt;/code&gt;路径。
例如：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Host github.com
	User git
	StrictHostKeyChecking no
	IdentityFile ~/.ssh/{你的rsa私钥的名称}
	IdentitiesOnly yes
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>